#include<stdio.h>
#include <stdlib.h>
#define BUCKETS 10
#define DIGITS 4
#define MAX_NUMBER 10

#define MAX_QUEUE_SIZE 100
typedef int element;
typedef struct{
	element queue[MAX_QUEUE_SIZE];
	int front,rear;
}QueueType;


void error(char *message)
{
	printf("%s\n", message);
}

void init(QueueType *q)
{
	q->front=q->rear=0;
}

int is_empty(QueueType *q)
{
	return(q->front==q->rear);
}

int is_full(QueueType *q)
{
	return ((q->rear+1)%MAX_QUEUE_SIZE==q->front);
}

void enqueue(QueueType *q,element item)
{
	if(is_full(q))
		error("the queue is full\n");
	q->rear=(q->rear+1)%MAX_QUEUE_SIZE;
	q->queue[q->rear]=item;
}

element dequeue(QueueType *q)
{
	if(is_empty(q))
		error("the queue is empty\n");
	q->front=(q->front+1)%MAX_QUEUE_SIZE;
	return q->queue[q->front];
}

void radix_sort(int list[],int n)
{
	int i,b,d,factor=1;

	QueueType queues[BUCKETS];

	for(b=0;b<BUCKETS;b++)
		init(&queues[b]);

	for(d=0;d<DIGITS;d++){
		for(i=0;i<n;i++)
			enqueue(&queues[(list[i]/factor)%10],list[i]);

		for(b=i=0;b<BUCKETS;b++)
			while(!is_empty(&queues[b]))
				list[i++]=dequeue(&queues[b]);
			factor*=10;
	}
}

void main()
{

//	int list[MAX_NUMBER]={1234,567,34,21,2575,3,24,35,112,500};
	int n=MAX_NUMBER;
	int list[MAX_NUMBER];
	int i;
	for(i=0;i<n;i++) list[i]=rand()%10000;

	radix_sort(list,n);
	
	for(i=0;i<n;i++)
		printf("%d ",list[i]);
	printf("\n");
}

